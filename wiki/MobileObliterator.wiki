#summary Notes on Mobile Oblitorator
#labels Reversing

=Data Partition Obliteration Routine=
Here is the routine used to reformat the data partition. I have reversed it to the best of my ability.

{{{
// MobileObliterator
// Obliterate Data Partition routine
//
// Reversed by Chronic (any contributors may add their name)
//
// NOTE: Some functions used, such as logText();, are internal functions of MobileObliterator,
// I just didn't feel the need to reverse it, since I pretty much know what they do.

extern boolean_t execServer(mach_msg_header_t*, mach_msg_header_t*);

void obliterateDataPartition() {
     mach_port_t                       servicePort;
     kern_return_t                               a;
     int                                unknownVar;
     ?                               unkownPointer;
     int                          iopmassertionOut;
     CFNotificationCenterRef appNotificationCenter;
     CFMutableDictionaryRef             usbService;
     CFMutableDictionaryRef   watchdogServMatching;
     io_service_t               matchingUsbService;
     CFMutableDictionaryRef      commandDictionary;
     kern_return_t                         sendCmd;
     int                               killDaemons;

     openlog("mobile_obliterate", 1, 24);
     a = bootstrap_check_in(
                            bootstrap_port,                       /* port         */
                            "com.apple.mobile.obliteration",      /* service name */
                            &servicePort                          /* service port */
                            );
     if(!a) {
         mach_msg_server_once(
                              execServer,
                              4096,
                              servicePort,
                              50331648                            /* timeout (?)  */
                              );      
     } else {
          logTxt("main", "bootstrap_check_in failed: 0x%x", a);
     }

     if(!unknownVar) {
          return(0);
     }

     iopmassertionOut = IOPMAssertionCreateWithName(
                                                    "NoIdleSleepAssertion",
                                                    255,
                                                    "mobile_obliterate",
                                                    &unkownPointer
                                                    );
     
     if(iopmassertionOut != 0) {
          logText("obliterate", "Cannot prevent idle sleep");
          reboot(0);
     }

     logText("obliterate", "Posting the data eschaton notification");
     appNotificationCenter = CFNotificationCenterGetDarwinNotifyCenter();
     if(appNotificationCenter != 0) {
          CFNotificationCenterPostNotification(
                                               appNotificationCenter;
                                               "com.apple.mobile.data_eschaton";
                                               iopmassertionOut
                                               iopmassertionOut
                                               );
          
     } else {
          logText("post_notification", "Could not get the darwin notification center");
     }

     logText("obliterate", "Disabling auto boot");
     setAutoBoot(0); /* Sets the "auto-boot" NVRAM variable to 0 */

     logText("obliterate", "Taking the device off the USB bus");
     usbService = IOServiceMatching("IOIpodUSBDevice");
     if(!usbService) {
          logText("getoff_bus", "Could not allocate the matching dictionary");
          logText("obliterate", "Could not get off the USB bus");
          reboot(0);
     }
     matchingUsbService = IOServiceGetMatchingService(kIOMasterPortDefault, usbService);
     if(!matchingUsbService) {
          logText("getoff_bus", "Could not lookup the USB device");
          logText("obliterate", "Could not get off the USB bus");
          reboot(0);
     }
     
     commandDictionary = CFDictionaryCreateMutable(
                                                      kCFAllocatorDefault,
                                                      0,
                                                      kCFTypeDictionaryKeyCallBacks,
                                                      kCFTypeDictionaryValueCallBacks
                                                      );
     if(!commandDictionary) {
          logText("getoff_bus", "Could not create the command dictionary");     
          IOObjectRelease(matchingUsbService);
          logText("obliterate", "Could not get off the USB bus");
          reboot(0);
     }
     
     CFDictionarySetValue(commandDictionary, "USBDeviceCommand", "ForceOffBusEnable");
     sendCmd = IORegistryEntrySetCFProperties(matchingUsbService, commandDictionary);
     if(sendCmd != 0) {
          logText("getoff_bus", "Could not send the command to the USB device %08x", sendCmd);
          logText("obliterate", "Could not get off the USB bus");
          reboot(0);
     }
     CFRelease(commandDictionary);
     IOObjectRelease(matchingUsbService);
     
     logText("obliterate", "Killing some daemons");
     killDaemons = doCmd(
                         "/bin/launchctl",
                         "unload",
                         "/System/Library/LaunchDaemons/com.apple.mediaserverd.plist", //kill sound daemon
                         "/System/Library/LaunchDaemons/com.apple.locationd82.plist", //kill GPS daemon
                         "/System/Library/LaunchDaemons/com.apple.itunesstored.plist", //kill iTunes Store daemon
                         "/System/Library/LaunchDaemons/com.apple.datamigrator.plist", //kill DataMigrator daemon
                         "/System/Library/LaunchDaemons/com.apple.dataaccess.dataaccessd.plist", //kill DataAccess daemon
                         "/System/Library/LaunchDaemons/com.apple.SpringBoard.plist", //kill SpringBoard
                         "/System/Library/LaunchDaemons/com.apple.AddressBook.plist", //kill AddressBook daemon
                         "/System/Library/LaunchDaemons/com.apple.AOSNotification.plist" //kill some kind of Push daemon
                         );
     if(killDaemons != 0) {
          logText("buffy_summers", "Could not kill the daemons: %d", killDaemons);
          logText("obliterate", "Could not kill daemons");
          reboot(0);
     }
     
     logText("obliterator", "Disabling the watchdog timer");
     watchdogServMatching = IOServiceMatching("IOWatchdogTimer");
     if(!watchdogServMatching) {
          logText("disable_watchdog", "Could not allocate the matching dictionary");
          logText("obliterate", "Could not disable the watchdog timer");
          reboot(0);
     }
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
}
}}}