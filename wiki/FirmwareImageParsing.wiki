#summary Notes on how iBoot and friends parse firmware images
#labels Featured,Information,Reversing

=Notes=
==Img3 Header Format==
{{{
typedef struct Img3Header {
    long     encType;     // (h)      string: "Img3"
    long    szPacked;     // (h+0x4)  file size (packed)
    long    codeStrt;     // (h+0x8)  file size (without header)
    long  footerStrt;     // (h+0xC)  location in file where the footer starts. if you are looking at a packed file then do the number at this loc + 0x14 (20 bytes)
    long         tag;     // (h+0x10) Image Tag, such as "ibot" or "illb", whose main purpose is to allow it to be located in NOR easily.
    long        data;     // (h+0x14) string: "DATA"
    long     srevLoc;     // (h+0x18) location in file where "SREV" tag starts. if you are looking at a packed file then do the number at this loc + 0x14 (20 bytes)
    long         unk;     // (h+0x1C) don't know what this is pointing at.
} Img3Header;
}}}

==Img3 Footer Format==
{{{
typedef struct Img3Footer {
    long          Begin;     // static string = "HSHS"
    long    BytesToCert;     // bytes from the start of the footer up until the "CERT" section
    ...                      // there is more but it has not been documented at this time
} Img3Footer;
}}}

==Memz Struct==
This is set up when a file is sent to memory and it is preparing to boot / execute it.

{{{
typedef struct BootromMemzStruct {
    long filesize;     // (s)
    long filesize;     // (s+0x4)
    (nothing?)         // (s+0x8)
    uint32_t Type;     // (s+0xC)  static string = "Memz"
    int     flags;     // (s+0x10)
    long loadaddr;     // (s+0x10) static value = 0x1800000
} BootromMemzStruct;
}}}

==Diagnostic Flag==
If bit 4 of the iBoot / LLB / bootrom / etc. flags is set, then that designates it as a diagnostic device it seems. If it is set, an image will still load even if the signature checks and / or tag checks fail.

Unfortunately, this is CHIPID (hardware) based, and cannot be just simply 'changed'. This section is only here to note the existance of it so that if anyone else comes across it then time is not wasted looking into it.

==Header Parsing==
These are the basic steps the header parsing routine takes:

1. Check the firmware file size, and fail If is is less then 0x17 (21 bytes). This is probably because the header is 20 bytes, and it would be just header and no firmware if it was less than 21, although I doubt one byte will do any use :P

2. Check the beginning of the file header. If it does not start with "Img3", then fail.

From here is assures that the data in the header is correct...

3. Check if what is at Img3Header->SizeNoHeader matches up with the actual file size minus 20. If not, fail.

4. Check if what is at Img3Header->SizeNoHeader is less than what is at Img3Header->FooterStart. If not, fail.

5. Check if what is at Img3Header->SizePacked matches up with what is at Img3Header->SizeNoHeader + 20

At this point it malloc's a buffer and puts some information in it...

{{{
typedef struct hbuff {
    long    Load_Address;     // technically, a pointer to be file start
    long      Footer_Var;     // if what is at Img3Header->FooterStart is 0x00, then this will be set to "1", otherwise, it will be set to "0x20001"
    long       File_Size;     // full / packed size of firmware file
} headbuff;

And then, the function will return the beforementioned buffer that it just filled, as long as everything went OK.

==Footer Parsing==

1. Check if what is at Img3Header->FooterStart + 0xC (12) is greater than what is at Img3Header->SizeNoHeader. If so, fail.

2. Footer = ((Load_Address+20)+[Img3Header->FooterStart])

3. Check if "HSHS" is at the start of the footer. If not, fail.

4. Certificate Loc = (loadaddr+0x14)+([footer->BytesToCert]+[Img3Header->SizeNoHeader])

5. /* tbc */

=Tag Parsing=
==KBAG Parsing==
see [http://code.google.com/p/chronicdev/wiki/KBAGFirmwareTag here]

=Reversings=
==Parsing Routines==
===Parse Footer===
{{{
/* more complete version being worked on as to be more detailed and / or there may have been mistakes in teh previous one */
}}}

===Generic Parse===
{{{
/* more complete version being worked on as to be more detailed and / or there may have been mistakes in teh previous one */
}}}

==Pre-Loading==
===Memz Struct Setup===
Seems to be the same as in iBoot / iBEC / etc.
{{{
ROM:22007408        ; =============== S U B R O U T I N E =======================================
ROM:22007408
ROM:22007408
ROM:22007408        ; int __cdecl Setup_Memz_Struct_Bootrom(__int32 loadaddr, __int32 filesize, int option)
ROM:22007408        Setup_Memz_Struct_Bootrom               ; CODE XREF: SecureROM_Start+BCp
ROM:22007408
ROM:22007408        var_8           = -8
ROM:22007408
ROM:22007408        loadaddr = R6
ROM:22007408        option = R5
ROM:22007408        filesize = R4
ROM:22007408 000 F0+                PUSH    {filesize-R7,LR} ; Push registers
ROM:2200740A 014 06+                ADDS    loadaddr, R0, #0 ; Rd = Op1 + Op2
ROM:2200740C 014 0C+                ADDS    filesize, R1, #0 ; Rd = Op1 + Op2
ROM:2200740E 014 03+                ADD     R7, SP, #0x14+var_8 ; Rd = Op1 + Op2
ROM:22007410 014 18+                MOVS    R0, #0x18       ; Rd = Op2
ROM:22007412 014 00+                MOVS    R1, #0          ; Rd = Op2
ROM:22007414 014 15+                ADDS    option, R2, #0  ; Rd = Op1 + Op2
ROM:22007416 014 FC+                BL      malloc          ; malloc(0x18);     // 24 bytes (hex -> decimal)
ROM:2200741A 014 00+                CMP     R0, #0          ; Set cond. codes on Op1 - Op2
ROM:2200741C 014 05+                BEQ     return          ; Branch
ROM:2200741E 014 03+                LDR     R3, =0x4D656D7A ; Memz
ROM:22007420 014 04+                STR     filesize, [R0]  ; Store to Memory
ROM:22007422 014 44+                STR     filesize, [R0,#4] ; Store to Memory
ROM:22007424 014 C3+                STR     R3, [R0,#0xC]   ; Store to Memory
ROM:22007426 014 05+                STR     option, [R0,#0x10] ; Store to Memory
ROM:22007428 014 46+                STR     loadaddr, [R0,#0x14] ; Store to Memory
ROM:2200742A
ROM:2200742A        return                                  ; CODE XREF: Setup_Memz_Struct_Bootrom+14j
ROM:2200742A 014 F0+                POP     {filesize-R7,PC} ; Pop registers
ROM:2200742A 014 BD ; End of function Setup_Memz_Struct_Bootrom
ROM:2200742A 014
ROM:2200742A        ; ---------------------------------------------------------------------------
ROM:2200742C 7A+    Memz_2          DCD 0x4D656D7A          ; DATA XREF: Setup_Memz_Struct_Bootrom+16r
ROM:22007430
}}}