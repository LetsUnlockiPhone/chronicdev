#summary Information for people who want to get involved
#labels Featured,Reversing

*Page is still a work in progress :)*

=Intro=
I have decided to take a short break from my reversing to type this up. That way, just maybe some more people that know a bit about the ARM instruction set can get involved in the cause. Hope this helps! :)

=Low Level Stuff=
==Bootrom==
The bootrom pretty much the lowest level code that runs on the device. It is not even in NOR, but embedded in hardware, so there is no way to upgrade or patch it. This is good, because an exploit here would mean that it cannot be fixed by Apple until a new device comes out. You cannot spawn an interactive session with the bootrom, but you can send it a file using "./[http://chronicdev.googlecode.com/svn/trunk/iRecovery iRecovery] -f [file]"

*Load Address*: 0x22000000

*File*: There is no 'file' for this, per se. But, the next best thing is what Apple tried to cover up the pwnage2 exploit with, WTF2.0. I will discuss WTF later. Anyway, get the firmware 2.1.1 iPod Touch 2G IPSW and look in [ipsw]/Firmware/dfu/WTF.s5l8900xall.RELEASE.dfu.

==LLB==
This stands for "Low Level Bootloader". It is executed by the bootrom once it is integrity checked. LLB will look in NOR for iBoot and if it cannot be found, then it will default to a mode in which iTunes / [http://chronicdev.googlecode.com/svn/trunk/iRecovery iRecovery] can send it (legit / signed Apple code), and you can go from there. This can be sent a file just like the bootrom, and maybe can accept commands to manipulate environmental variables too.

*Load Address*: 0x22000000

*File*: LLB from inside of the iPod Touch 2G IPSW is encrypted, so you cannot look at it at this time. But, if you look in /Firmware/all_flash/all_flash.[model].production/LLB.[model].RELEASE.img3 from a iPhone / iPhone3G / iPod Touch 1G firmware, you can use 'xpwntool' from [http://github.com/planetbeing/xpwn/tree/master xpwn] to unpack and load it in IDA.

==iBoot==
iBoot is very complicated. It's main purpose is to load the kernel and start the main OS, but there is much more to it. NAND initialization, diagnostic firmware loading (if present), and best off all, and interactive interface. This was probably meant for Apple engineers to use along with serial cables to test different things out, but once a tool called "iBooter" was released in the 1.1.x days, it's full potential was realized. Now, [http://chronicdev.googlecode.com/svn/trunk/iRecovery iRecovery] must be used to communicate with iBoot in 2.x. In order to talk to the bootloader, you must boot up the device holding the "Home" button. An icon of a USB cable plugging into iTunes will appear. From here, you can use iRecovery to spawn an interactive session with it, using "./iRecovery -s". Most of the commands are restricted or not usable because they require a developer board to be installed on the device, but having a two way session is very useful when you are developing an exploit. Example: You think you may have found an exploit in the firmware parsing code. The easiest way to test if this works is by sending it an exploited file using "./iRecovery -f [file]", and then "./iRecovery -s" to spawn an interactive session with iBoot, then the "go" command to validate and execute the sent code.

*Load Address*: 0x18000000

*File*: This is the same case as with LLB, except the file name will start with "iBoot" instead.